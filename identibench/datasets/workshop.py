"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/datasets/workshop.ipynb.

# %% auto 0
__all__ = ['BenchmarkWH_Simulation', 'BenchmarkWH_Prediction', 'BenchmarkSilverbox_Simulation', 'BenchmarkSilverbox_Prediction',
           'BenchmarkCascadedTanks_Simulation', 'BenchmarkCascadedTanks_Prediction', 'BenchmarkEMPS_Simulation',
           'BenchmarkEMPS_Prediction', 'BenchmarkNoisyWH_Simulation', 'BenchmarkNoisyWH_Prediction',
           'BenchmarkCED_Simulation', 'BenchmarkCED_Prediction', 'wiener_hammerstein', 'silverbox', 'cascaded_tanks',
           'emps', 'noisy_wh', 'ced']

# %% ../../nbs/datasets/workshop.ipynb 2
from ..utils import *
import identibench.benchmark as idb
import identibench.metrics
import nonlinear_benchmarks
from nonlinear_benchmarks.utilities import Input_output_data
from pathlib import Path
import shutil

# %% ../../nbs/datasets/workshop.ipynb 7
def wiener_hammerstein(
        save_path: Path, #directory the files are written to, created if it does not exist
        force_download: bool = False, # force download the dataset
        save_train_valid: bool = True, # save unsplitted train and valid datasets in 'train_valid' subdirectory
        split_idx: int = 80_000 # split index for train and valid datasets
):
    train_val, test = nonlinear_benchmarks.WienerHammerBenchMark(force_download=force_download)
    train = train_val[:split_idx]
    valid = train_val[split_idx:]

    dataset_to_hdf5(train,valid,test,save_path,train_valid=(train_val if save_train_valid else None))

# %% ../../nbs/datasets/workshop.ipynb 9
BenchmarkWH_Simulation = idb.BenchmarkSpecSimulation(
    name='BenchmarkWH_Simulation', dataset_id='wh',
    u_cols=['u0'], y_cols=['y0'], metric_func=identibench.metrics.rmse, 
    download_func=wiener_hammerstein,
    init_window=100
)
BenchmarkWH_Prediction = idb.BenchmarkSpecPrediction(
    name='BenchmarkWH_Prediction', dataset_id='wh',
    u_cols=['u0'], y_cols=['y0'], metric_func=identibench.metrics.rmse, 
    download_func=wiener_hammerstein,
    init_window=100, pred_horizon=100, pred_step=100
)

# %% ../../nbs/datasets/workshop.ipynb 14
def silverbox(
        save_path: Path, #directory the files are written to, created if it does not exist
        force_download: bool = False, # force download the dataset
        save_train_valid: bool = True, # save unsplitted train and valid datasets in 'train_valid' subdirectory
        split_idx: int = 50_000 # split index for train and valid datasets
):
    train_val, test = nonlinear_benchmarks.Silverbox(force_download=force_download)
    train = train_val[:split_idx]
    valid = train_val[split_idx:]

    dataset_to_hdf5(train,valid,test,save_path,train_valid=(train_val if save_train_valid else None))

# %% ../../nbs/datasets/workshop.ipynb 16
BenchmarkSilverbox_Simulation = idb.BenchmarkSpecSimulation(
    name='BenchmarkSilverbox_Simulation', dataset_id='silverbox',
    u_cols=['u0'], y_cols=['y0'], metric_func=identibench.metrics.rmse, 
    download_func=silverbox,
    init_window=100
)
BenchmarkSilverbox_Prediction = idb.BenchmarkSpecPrediction(
    name='BenchmarkSilverbox_Prediction', dataset_id='silverbox',
    u_cols=['u0'], y_cols=['y0'], metric_func=identibench.metrics.rmse, 
    download_func=silverbox,
    init_window=100, pred_horizon=100, pred_step=100
)

# %% ../../nbs/datasets/workshop.ipynb 21
def cascaded_tanks(
        save_path: Path, #directory the files are written to, created if it does not exist
        force_download: bool = False, # force download the dataset
        save_train_valid: bool = True, # save unsplitted train and valid datasets in 'train_valid' subdirectory
        split_idx: int = 160 # split index for train and valid datasets
):
    train_val, test = nonlinear_benchmarks.Cascaded_Tanks(force_download=force_download)
    train = train_val[split_idx:]
    valid = train_val[:split_idx]

    dataset_to_hdf5(train,valid,test,save_path,train_valid=(train_val if save_train_valid else None))

# %% ../../nbs/datasets/workshop.ipynb 23
BenchmarkCascadedTanks_Simulation = idb.BenchmarkSpecSimulation(
    name='BenchmarkCascadedTanks_Simulation', dataset_id='cascaded_tanks',
    u_cols=['u0'], y_cols=['y0'], metric_func=identibench.metrics.rmse, 
    download_func=cascaded_tanks,
    init_window=100
)
BenchmarkCascadedTanks_Prediction = idb.BenchmarkSpecPrediction(
    name='BenchmarkCascadedTanks_Prediction', dataset_id='cascaded_tanks',
    u_cols=['u0'], y_cols=['y0'], metric_func=identibench.metrics.rmse, 
    download_func=cascaded_tanks,
    init_window=100, pred_horizon=100, pred_step=100
)

# %% ../../nbs/datasets/workshop.ipynb 28
def emps(
        save_path: Path, #directory the files are written to, created if it does not exist
        force_download: bool = False, # force download the dataset
        save_train_valid: bool = True, # save unsplitted train and valid datasets in 'train_valid' subdirectory
        split_idx: int = 18_000 # split index for train and valid datasets
):
    train_val, test = nonlinear_benchmarks.EMPS(force_download=force_download)
    train = train_val[:split_idx]
    valid = train_val[split_idx:]

    dataset_to_hdf5(train,valid,test,save_path,train_valid=(train_val if save_train_valid else None))

# %% ../../nbs/datasets/workshop.ipynb 30
BenchmarkEMPS_Simulation = idb.BenchmarkSpecSimulation(
    name='BenchmarkEMPS_Simulation', dataset_id='emps',
    u_cols=['u0'], y_cols=['y0'], metric_func=identibench.metrics.rmse, 
    download_func=emps,
    init_window=100
)
BenchmarkEMPS_Prediction = idb.BenchmarkSpecPrediction(
    name='BenchmarkEMPS_Prediction', dataset_id='emps',
    u_cols=['u0'], y_cols=['y0'], metric_func=identibench.metrics.rmse, 
    download_func=emps,
    init_window=100, pred_horizon=100, pred_step=100
)

# %% ../../nbs/datasets/workshop.ipynb 34
from scipy.io import loadmat
def noisy_wh(
        save_path: Path, #directory the files are written to, created if it does not exist
        force_download: bool = False, # force download the dataset
        save_train_valid: bool = True # save unsplitted train and valid datasets in 'train_valid' subdirectory
):
    'the wiener hammerstein dataset with process noise'

    #extract raw .mat files, to preserve filenames necessary for train, valid split
    matfiles = nonlinear_benchmarks.not_splitted_benchmarks.WienerHammerstein_Process_Noise(data_file_locations=True,train_test_split=False,force_download=force_download)

    for file in matfiles:
        f_path = Path(file)
        save_path = Path(save_path)

        if 'Test' in f_path.stem:
            hdf_path = save_path / 'test'
        elif 'Combined' in f_path.stem:
            hdf_path = save_path / 'valid'
        else:
            hdf_path = save_path / 'train'

        out = loadmat(f_path)
        _,u,y,fs = out['dataMeas'][0,0]
        fs = fs[0,0]
        for idx,(ui,yi) in enumerate(zip(u.T,y.T)):
            iodata = Input_output_data(u=ui,y=yi, sampling_time=1/fs)
            fname = f'{f_path.stem}_{idx+1}'
            iodata_to_hdf5(iodata,hdf_path,fname)
    if save_train_valid:
        #copy train and valid files to train_valid directory
        for d in ['train','valid']:
            for f in (Path(save_path)/d).glob('*.hdf5') :
                shutil.copy2(f, (p:=Path(save_path)/'train_valid').mkdir(exist_ok=True) or p)


# %% ../../nbs/datasets/workshop.ipynb 36
BenchmarkNoisyWH_Simulation = idb.BenchmarkSpecSimulation(
    name='BenchmarkNoisyWH_Simulation', dataset_id='noisy_wh',
    u_cols=['u0'], y_cols=['y0'], metric_func=identibench.metrics.rmse, 
    download_func=noisy_wh,
    init_window=100
)
BenchmarkNoisyWH_Prediction = idb.BenchmarkSpecPrediction(
    name='BenchmarkNoisyWH_Prediction', dataset_id='noisy_wh',
    u_cols=['u0'], y_cols=['y0'], metric_func=identibench.metrics.rmse, 
    download_func=noisy_wh,
    init_window=100, pred_horizon=100, pred_step=100
)

# %% ../../nbs/datasets/workshop.ipynb 45
def ced(
        save_path: Path, #directory the files are written to, created if it does not exist
        force_download: bool = False, # force download the dataset
        save_train_valid: bool = True, # save unsplitted train and valid datasets in 'train_valid' subdirectory
        split_idx: int = 300 # split index for train and valid datasets
):
    train_val, test = nonlinear_benchmarks.CED(force_download=force_download,always_return_tuples_of_datasets=True)
    train = tuple(x[:split_idx] for x in train_val)
    valid = tuple(x[split_idx:] for x in train_val)

    dataset_to_hdf5(train,valid,test,save_path,train_valid=(train_val if save_train_valid else None))

# %% ../../nbs/datasets/workshop.ipynb 47
BenchmarkCED_Simulation = idb.BenchmarkSpecSimulation(
    name='BenchmarkCED_Simulation', dataset_id='ced',
    u_cols=['u0'], y_cols=['y0'], metric_func=identibench.metrics.rmse, 
    download_func=ced,
    init_window=100
)
BenchmarkCED_Prediction = idb.BenchmarkSpecPrediction(
    name='BenchmarkCED_Prediction', dataset_id='ced',
    u_cols=['u0'], y_cols=['y0'], metric_func=identibench.metrics.rmse, 
    download_func=ced,
    init_window=100, pred_horizon=100, pred_step=100
)
