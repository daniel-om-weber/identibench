# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['write_dataset', 'write_array', 'to_hdf5']

# %% ../nbs/00_core.ipynb 4
import nonlinear_benchmarks
from pathlib import Path
import numpy as np
import h5py
from fastcore.test import *
import os
import shutil

# %% ../nbs/00_core.ipynb 9
def write_dataset(group, #opened hdf5 group to write the dataset, can be a file or group
         ds_name:str, #name of the new dataset
         data: np.array, #data to write to the dataset
         dtype='f4', #datatype, the data will be converted to
         chunks=None #chunking of the hdf5 file, enables faster reading and writing of small parts
         ):
    group.create_dataset(ds_name, data=data, dtype=dtype, chunks=chunks)

# %% ../nbs/00_core.ipynb 11
def write_array(group, #opened hdf5 group to write the dataset, can be a file or group
                ds_name:str, #name of the new dataset
                data: np.array, #data to write to the dataset
                dtype='f4', #datatype, the data will be converted to
                chunks=None #chunking of the hdf5 file, enables faster reading and writing of small parts
                ) -> None:
    for i in range(data.shape[1]):
        write_dataset(group, f'{ds_name}{i}', data[:,i], dtype, chunks)

# %% ../nbs/00_core.ipynb 13
def to_hdf5(self, 
            hdf_dir:Path # Export directory for hdf5 files
            ):
    data_2d = self.atleast_2d()
    u,y = data_2d.u, data_2d.y
    
    os.makedirs(hdf_dir,exist_ok=True)
    hdf_path = Path(hdf_dir) / f'{self.name}.hdf5'.replace(" ", "_")
    with h5py.File(hdf_path,'w') as f:
        write_array(f,'u',u)
        write_array(f,'y',y)

    return hdf_path 


nonlinear_benchmarks.utilities.Input_output_data.to_hdf5 = to_hdf5
